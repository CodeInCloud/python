CASE 1:

L1 = 3
L2 = L1
L1 = 4

>>> L1 
4
>>> L2 
3

ps: 因为在 pyhton 中变量是对象的引用 L1 = 4 把变量 L1 修改为常量对象 4 的引用，并没有改变 L2 为常量 3 的引用这一事实。

CASE 2: 

L1 = [2, 3, 4]
L2 = L1;
L1 = 4;

>>> L1
4
>>> L2 
[2, 3, 4]

ps: 同 CASE 1。

CASE 3:

L1 = [2, 3, 4]
L2 = L1
L1[0] = 100

>>> L1 
[100, 3, 4]
>>> L2 
[100, 3, 4]

ps: 修改 L1 后并没有生成新的对象让 L1 引用， 而是修改了 L1 引用的对象的值 Why? （2013-07-29）
答： 因为 没有生成新的对象， 只是修改了 L1 引用的对象的一部分， 而被修改的对象是 L1 L2 共享的
所以查询 L2 时输出改变后的对象




